#include "GTOC11_problem.h"

#include <fstream>
#include <string>

#include "Constant.h"
#include "OrbitFun.h"

double data_GTOC11[83453][7];

std::vector<std::vector<int>> Sequence_GTOC11_multi;
std::vector<std::vector<double>> T_GTOC11_multi;
std::vector<std::vector<double>> Maximum_T_GTOC11;

void read_data_GTOC11(std::string filename)
{
	std::ifstream fin;
	std::string fileName = filename;
	fin.open(fileName);

	double temp;
	int flag;
	//0：轨道半长轴(AU)；1：轨道偏心率；2：轨道倾角(rad)；3：轨道升交点赤经(rad)；4：轨道近地点幅角(rad)；5：轨道真近点角(rad), 6：质量(kg)
	for (int i = 0; i < 83453; i++)
	{
		fin >> temp >> temp >> data_GTOC11[i][0]
			>> data_GTOC11[i][1] >> data_GTOC11[i][2]
			>> data_GTOC11[i][3] >> data_GTOC11[i][4]
			>> data_GTOC11[i][5] >> data_GTOC11[i][6];
		data_GTOC11[i][2] *= D2R;
		data_GTOC11[i][3] *= D2R;
		data_GTOC11[i][4] *= D2R;
		data_GTOC11[i][5] *= D2R;

		data_GTOC11[i][5] = M2E(flag, data_GTOC11[i][5], data_GTOC11[i][1]);
		data_GTOC11[i][5] = E2f(flag, data_GTOC11[i][5], data_GTOC11[i][1]);
	}
}
void read_data_GTOC11()
{
	std::ifstream fin;
	std::string fileName = "../input/Candidate_Asteroids.txt";
	fin.open(fileName);

	double temp;
	int flag;
	//0：轨道半长轴(AU)；1：轨道偏心率；2：轨道倾角(rad)；3：轨道升交点赤经(rad)；4：轨道近地点幅角(rad)；5：轨道真近点角(rad), 6：质量(kg)
	for (int i = 0; i < 83453; i++)
	{
		fin >> temp >> temp >> data_GTOC11[i][0]
			>> data_GTOC11[i][1] >> data_GTOC11[i][2]
			>> data_GTOC11[i][3] >> data_GTOC11[i][4]
			>> data_GTOC11[i][5] >> data_GTOC11[i][6];
		data_GTOC11[i][2] *= D2R;
		data_GTOC11[i][3] *= D2R;
		data_GTOC11[i][4] *= D2R;
		data_GTOC11[i][5] *= D2R;

		data_GTOC11[i][5] = M2E(flag, data_GTOC11[i][5], data_GTOC11[i][1]);
		data_GTOC11[i][5] = E2f(flag, data_GTOC11[i][5], data_GTOC11[i][1]);
	}
}

//获得t时刻小行星id的rv，t为归一化单位，rv为归一化速度增量
void getrv_asteroid_GTOC11(double* rv, int id, double t)
{
	double coe[6];
	int flag;
	for (int i = 0; i < 6; i++)
		coe[i] = data_GTOC11[id][i];
	coe[5] = f0dt2ft(flag, coe[5], t - 59396.0 * 86400.0 / GTOC11_TUnit, coe[0], coe[1], 1.0);
	coe2rv(flag, rv, coe, 1.0);
}

//获得t时刻小行星id的coe，t为归一化单位，coe为归一化经典轨道根数
//原内容为t为归一化单位的MJD时间
//20241113修改为0时刻，对应的速度为
void getcoe_asteroid_GTOC11(double* coe, int id, double t)
{
	int flag;
	for (int i = 0; i < 6; i++)
		coe[i] = data_GTOC11[id][i];
	coe[5] = f0dt2ft(flag, coe[5], t - 59396.0 * 86400.0 / GTOC11_TUnit, coe[0], coe[1], GTOC11_Gms_Unit);
}


//获得t时刻地球的rv，t为归一化单位，rv为归一化速度增量
void getrv_Earth_GTOC11(double* rv, double t)
{
	int flag;
	double coe[6] = { 9.998012770769207e-1,	1.693309475505424e-2,	3.049485258137714e-3 * D2R,	1.662869706216879e2 * D2R,	2.978214889887391e2 * D2R,	1.757352290983351e2 * D2R };
	coe[5] = M2E(flag, coe[5], coe[1]);
	coe[5] = E2f(flag, coe[5], coe[1]);
	coe[5] = f0dt2ft(flag, coe[5], t - 59396.0 * 86400.0 / GTOC11_TUnit, coe[0], coe[1], 1.0);
	coe2rv(flag, rv, coe, 1.0);
}

//获得t时刻地球的rv，t为归一化单位，rv为归一化速度增量
void getcoe_Earth_GTOC11(double* coe, double t)
{
	int flag;
	double coe_temp[6] = { 9.998012770769207e-1,	1.693309475505424e-2,	3.049485258137714e-3 * D2R,	1.662869706216879e2 * D2R,	2.978214889887391e2 * D2R,	1.757352290983351e2 * D2R };
	memcpy(coe, coe_temp, 6 * sizeof(double));
	coe[5] = M2E(flag, coe[5], coe[1]);
	coe[5] = E2f(flag, coe[5], coe[1]);
	coe[5] = f0dt2ft(flag, coe[5], t - 59396.0 * 86400.0 / GTOC11_TUnit, coe[0], coe[1], 1.0);
}


//序号-2对应地球，其余对应小行星
//t传入的单位是s，从0开始，代表任务初始时刻 95739.0 (MJD)
//coe 传出的单位是m
void getcoe_GTOC11(double* coe, int id, double t)
{
	t = (t + GTOC11_MJD_Init * 86400.0) / GTOC11_TUnit; //转换为归一化单位

	if (id == -2)
		getcoe_Earth_GTOC11(coe, t);
	else
		getcoe_asteroid_GTOC11(coe, id, t);

	coe[0] *= GTOC11_AU;
}

//序号-2对应地球，其余对应小行星
//t传入的单位是s，从0开始，代表任务初始时刻 95739.0 (MJD)
//rv 传出的单位是m,m/s
void getrv_GTOC11(double* rv, int id, double t)
{
	double coe[6];
	getcoe_GTOC11(coe, id, t);
	int flag;
	coe2rv(flag, rv, coe, GTOC11_mu);
}




//求a的情况：参考知乎文章https://zhuanlan.zhihu.com/p/32657994
double compute_2a(double theta, double m, double n, double c, double r) {
	double B1 = 2 * (m + c) * r;
	double B2 = 2 * (m - c) * r;
	double A = 2 * n * r;
	double C1 = (m + c) * (m + c) + n * n + r * r;
	double C2 = (m - c) * (m - c) + n * n + r * r;

	double term1 = sqrt(A * sin(theta) + B1 * cos(theta) + C1);
	double term2 = sqrt(A * sin(theta) + B2 * cos(theta) + C2);

	return term1 + term2;
}

double compute_derivative(double theta, double m, double n, double c, double r) {
	double B1 = 2 * (m + c) * r;
	double B2 = 2 * (m - c) * r;
	double A = 2 * n * r;
	double C1 = (m + c) * (m + c) + n * n + r * r;
	double C2 = (m - c) * (m - c) + n * n + r * r;

	double term1 = A * cos(theta) - B1 * sin(theta);
	double term2 = A * cos(theta) - B2 * sin(theta);
	double denom1 = 2 * sqrt(A * sin(theta) + B1 * cos(theta) + C1);
	double denom2 = 2 * sqrt(A * sin(theta) + B2 * cos(theta) + C2);

	return term1 / denom1 + term2 / denom2;
}

double find_minimum(double m, double n, double c, double r) {
	double a = (1.0-0.01) * DPI;
	double b = 1.501 * DPI;
	const double gr = (sqrt(5.0) + 1.) / 2.;  // 黄金分割比例

	double c_point = b - (b - a) / gr;
	double d_point = a + (b - a) / gr;

	int MAX_ITER = 10000;
	double TOLERANCE = 1.0e-4;
	int iter = 0;
	double fc = 1.0;
	double fd = -1.0;
	while (fabs(fc - fd) > TOLERANCE) {
		fc = compute_2a(c_point, m, n, c, r);
		fd = compute_2a(d_point, m, n, c, r);

		if (fc < fd) {
			b = d_point;
		}
		else {
			a = c_point;
		}
		iter++;
		c_point = b - (b - a) / gr;
		d_point = a + (b - a) / gr;
	}

	double theta = (b + a) / 2;
	return compute_2a(theta, m, n, c, r);
}


//int main() {
//	double m, n, c, r;
//	printf("Enter values for m, n, c, r: ");
//	scanf("%lf %lf %lf %lf", &m, &n, &c, &r);
//
//	double min_2a = find_minimum(m, n, c, r);
//	printf("The minimum value of 2a is: %.6f\n", min_2a);
//
//	return 0;
//}

void GTOC11_sequence_process()
{
	//处理原始数据
	// 数据
	std::vector<std::vector<double>> rawData = {
		{36, -2, 74927, 83060, 82638, 77507, 83142, 58217, 66549, 72751, 81701, 83046, 59210, 60831, 83288, 29267, 57825, 62129, 60463, 60741, 82008, 65655, 44892, 46576, 75946, 73099, 83146, 51744, 55264, 76541, 83354, 39256, 82229, 53540, 82009, 69346, 45634, 1681.7288160163, 1681.7288160163, 1681.7288160163, 1681.7288160163, 1681.7288160163, 1681.7288160163, 1681.7288160163, 1681.7288160163, 1681.7288160163, 1681.7288160163, 1693.5467169927, 1693.5467169927, 1693.5467169927, 1693.5467169927, 1709.028273586, 1709.028273586, 1709.028273586, 1709.1402856556, 1709.2691253871, 1713.8968773668, 1713.8968773668, 1713.8968773668, 1717.2598835569, 1717.474572233, 1718.205727209, 1718.8076612026, 1735.4858051486, 1735.4858051486, 1736.1220011422, 1736.1220011422, 1736.1220011422, 1736.1220011422, 1739.9667592944, 1742.1689957729, 1742.1689957729, 1744.5684985139},
		{43, -2, 55310, 74016, 64404, 78556, 70678, 82170, 76481, 82928, 62378, 78602, 60162, 55115, 44687, 83126, 76821, 54356, 74711, 83357, 76542, 81593, 74130, 83272, 81088, 80799, 81313, 81682, 67095, 81317, 78421, 63893, 19107, 78190, 48817, 53517, 36882, 78043, 17061, 74090, 78290, 54239, 32558, 78048, 1675.7425306504, 1675.7425306504, 1675.7425306504, 1675.7425306504, 1689.615827766, 1689.615827766, 1689.615827766, 1689.615827766, 1689.615827766, 1689.615827766, 1691.3017585646, 1691.3017585646, 1691.3017585646, 1691.3017585646, 1691.3017585646, 1697.692407135, 1697.692407135, 1705.2440468029, 1705.2440468029, 1705.3041767619, 1705.3041767619, 1706.4823280964, 1706.4823280964, 1706.4823280964, 1713.7247290304, 1713.7247290304, 1722.7725605487, 1722.7725605487, 1723.8390202933, 1724.3211966491, 1724.3211966491, 1731.0900966292, 1731.0900966292, 1731.0900966292, 1731.0900966292, 1731.0900966292, 1734.6853626306, 1745.6263604125, 1745.6263604125, 1745.6263604125, 1747.0536820446, 1747.0536820446, 1752.7303488918},
		{40, -2, 80043, 60782, 83309, 66336, 83094, 66482, 65859, 75929, 53658, 82499, 77261, 81351, 83191, 42583, 82565, 64666, 47805, 55894, 53230, 80729, 66331, 66828, 15279, 48565, 67447, 16854, 60884, 49426, 39986, 82954, 79841, 52163, 75761, 81831, 82932, 57468, 76334, 81606, 59025, 1675.8800245699, 1675.8800245699, 1675.8800245699, 1675.8800245699, 1675.8800245699, 1675.8800245699, 1675.8800245699, 1675.8800245699, 1675.8800245699, 1677.3680597602, 1677.3680597602, 1677.3680597602, 1696.3077446657, 1696.3077446657, 1696.3077446657, 1696.3077446657, 1696.3077446657, 1696.3077446657, 1712.1507733425, 1712.1507733425, 1712.1507733425, 1712.1507733425, 1712.1507733425, 1712.1507733425, 1712.1507733425, 1713.1485463876, 1721.5086096624, 1721.5086096624, 1721.5086096624, 1725.4048340185, 1725.4048340185, 1731.0906390578, 1731.0906390578, 1731.0906390578, 1731.0906390578, 1743.9916132395, 1743.9916132395, 1743.9916132395, 1743.9916132395, 1748.4904595808},
		{42, -2, 80704, 69771, 66333, 72692, 60233, 37538, 82808, 83151, 50732, 80697, 83390, 79538, 67346, 71439, 70700, 77568, 47895, 78857, 53312, 64425, 36584, 81820, 80002, 33478, 82228, 45709, 39961, 68728, 83202, 82043, 54389, 66540, 80212, 63508, 47043, 53788, 77036, 36381, 78603, 69071, 79967, 1677.4797719391, 1677.4797719391, 1677.4797719391, 1677.4797719391, 1677.4797719391, 1677.4797719391, 1677.4797719391, 1689.3838410829, 1689.3838410829, 1689.3838410829, 1689.3838410829, 1689.3838410829, 1689.3838410829, 1689.3838410829, 1689.3838410829, 1697.0128153609, 1697.0128153609, 1697.0128153609, 1697.0128153609, 1697.0128153609, 1706.5256140127, 1706.5256140127, 1706.5256140127, 1717.277058651, 1717.277058651, 1717.277058651, 1717.277058651, 1717.277058651, 1717.277058651, 1722.7129052882, 1722.7129052882, 1738.6158769058, 1738.6158769058, 1741.4627759242, 1741.5921524516, 1741.6000083114, 1741.6000083114, 1744.9200360783, 1744.9200360783, 1744.9200360783, 1748.1029448573, 1748.8513262755},
		{41, -2, 80068, 80174, 80924, 58840, 61680, 81520, 68245, 69090, 61715, 49352, 81874, 22434, 53149, 74239, 63716, 83419, 75690, 55655, 48562, 37165, 31825, 58789, 68165, 63888, 83023, 79838, 80788, 67460, 74685, 27136, 52915, 75593, 71252, 68956, 57625, 80492, 72015, 77184, 82163, 73126, 1674.3748040933, 1674.3748040933, 1674.3748040933, 1674.3748040933, 1674.3748040933, 1674.3748040933, 1678.8732829614, 1678.8732829614, 1687.2505863567, 1687.2505863567, 1687.2505863567, 1687.2505863567, 1687.2505863567, 1687.2505863567, 1697.2622555011, 1697.2622555011, 1697.2966201994, 1703.2485181904, 1703.2485181904, 1703.2485181904, 1721.4914367691, 1721.5687147891, 1721.5687147891, 1721.5687147891, 1721.5687147891, 1721.5687147891, 1721.5687147891, 1721.80098641, 1721.80098641, 1739.6651511957, 1739.6651511957, 1739.6651511957, 1739.6651511957, 1739.6651511957, 1742.5985521632, 1742.5985521632, 1742.5985521632, 1742.5985521632, 1745.1188640324, 1748.7913410965, 1749.9605598386},
		{40, -2, 70431, 81691, 80281, 65202, 80320, 64517, 74832, 76979, 68983, 83258, 30204, 40312, 81847, 14450, 78177, 82259, 54456, 64344, 53222, 56094, 60789, 70549, 60743, 63761, 41517, 72023, 52221, 76765, 79383, 72970, 79311, 54186, 57817, 68233, 83183, 77107, 81981, 61945, 81950, 1670.9258668931, 1670.9258668931, 1670.9258668931, 1670.9258668931, 1670.9258668931, 1670.9258668931, 1670.9258668931, 1670.9258668931, 1670.9258668931, 1685.8487280734, 1687.4570636712, 1687.4570636712, 1687.4570636712, 1687.4570636712, 1692.8929058954, 1692.8929058954, 1711.9872179787, 1711.9872179787, 1711.9872179787, 1711.9872179787, 1711.9872179787, 1711.9872179787, 1712.227703322, 1712.227703322, 1723.4612439326, 1723.4612439326, 1723.4612439326, 1723.4612439326, 1723.4612439326, 1723.4612439326, 1723.4612439326, 1729.7656086278, 1731.1759271856, 1731.1759271856, 1742.6585839779, 1742.6585839779, 1742.6585839779, 1747.9572492228, 1749.495916697, 1749.5311681163},
		{38, -2, 77859, 49740, 72525, 53020, 40609, 38475, 54909, 82986, 81717, 67683, 83190, 73732, 43128, 57575, 64977, 82906, 82312, 81489, 81591, 61808, 82329, 79989, 81835, 83289, 77054, 48581, 81131, 83350, 70356, 74977, 51380, 82948, 80599, 50807, 77569, 43769, 82629, 1670.2121470833, 1670.2121470833, 1670.2121470833, 1670.2121470833, 1670.2121470833, 1670.2121470833, 1673.9878701978, 1673.9878701978, 1674.684623708, 1674.684623708, 1676.2585939498, 1677.0498754371, 1695.3443477497, 1695.3443477497, 1695.3443477497, 1695.3443477497, 1695.3443477497, 1695.3443477497, 1703.541234003, 1703.541234003, 1708.5469184671, 1723.2375552714, 1723.2375552714, 1723.2375552714, 1723.2375552714, 1726.1875118481, 1726.1875118481, 1729.714107009, 1729.714107009, 1733.1457597402, 1733.1457597402, 1733.1457597402, 1737.5243451589, 1737.5243451589, 1737.5243451589, 1743.0545886745, 1743.0545886745, 1748.3600548006},
		{41, -2, 80734, 65563, 63815, 82550, 52264, 29290, 72842, 83276, 72665, 67066, 77813, 74997, 60308, 81870, 16136, 83320, 77846, 83347, 79236, 77942, 51274, 40150, 50708, 81679, 63371, 50970, 35694, 72674, 62161, 81700, 62359, 81939, 70451, 74360, 45266, 48880, 78054, 75116, 74965, 81588, 1677.5745318838, 1677.5745318838, 1677.5745318838, 1677.5745318838, 1677.5745318838, 1677.5745318838, 1678.4605749267, 1678.4605749267, 1678.4605749267, 1678.4605749267, 1678.4605749267, 1678.4605749267, 1696.4452050746, 1696.4452050746, 1696.4452050746, 1696.4452050746, 1696.4452050746, 1696.4452050746, 1706.3277113192, 1713.8277896173, 1722.1019488475, 1722.1019488475, 1722.1019488475, 1722.1019488475, 1722.4548732585, 1722.4548732585, 1722.5918073582, 1722.5918073582, 1722.5918073582, 1728.4497003971, 1728.4497003971, 1732.9992979765, 1734.556053677, 1741.764418202, 1741.764418202, 1741.764418202, 1746.4253223016, 1747.6383109663, 1747.6383109663, 1747.6383109663, 1753.143665301},
		{38, -2, 75507, 82896, 82348, 81103, 82483, 74194, 71831, 55974, 64879, 42394, 76823, 63216, 82721, 74555, 83254, 78856, 83345, 82681, 77716, 59321, 71256, 64723, 65894, 80715, 77717, 73975, 82952, 74279, 80746, 71294, 83255, 76239, 76928, 83308, 83189, 83418, 49892, 1680.9893372365, 1680.9893372365, 1680.9893372365, 1680.9893372365, 1680.9893372365, 1680.9893372365, 1680.9893372365, 1680.9893372365, 1680.9893372365, 1680.9893372365, 1680.9893372365, 1680.9893372365, 1680.9893372365, 1682.1245796155, 1703.5323201261, 1703.5323201261, 1703.5323201261, 1703.5323201261, 1703.5323201261, 1709.4931529865, 1709.4931529865, 1709.4931529865, 1709.4931529865, 1730.4710358776, 1730.4710358776, 1734.7969198205, 1734.7969198205, 1743.5012794619, 1743.5012794619, 1743.5012794619, 1743.5012794619, 1743.5012794619, 1743.5012794619, 1743.5012794619, 1749.9091527938, 1749.9091527938, 1750.8898732995, 1750.8898732995},
		{39, -2, 61229, 57025, 67174, 46651, 81330, 82868, 26708, 78390, 79061, 42657, 81762, 57128, 80309, 63312, 83247, 78627, 43727, 54394, 71839, 82762, 69829, 20375, 47373, 74062, 31824, 45578, 80340, 77722, 11517, 76648, 78668, 82958, 74690, 76622, 83287, 83339, 82857, 69119, 1672.1043067077, 1672.1043067077, 1672.1043067077, 1672.560214835, 1672.560214835, 1672.560214835, 1672.560214835, 1672.560214835, 1685.6940635387, 1685.6940635387, 1685.6940635387, 1685.6940635387, 1685.6940635387, 1694.3294037309, 1694.3294037309, 1695.0863159746, 1695.0863159746, 1715.6859268155, 1715.6859268155, 1715.6859268155, 1715.6859268155, 1715.6859268155, 1720.7521225056, 1720.7521225056, 1720.7521225056, 1720.7521225056, 1720.7521225056, 1725.877970617, 1725.877970617, 1728.2517584366, 1728.2517584366, 1737.2742500494, 1737.2742500494, 1737.2742500494, 1740.327726476, 1745.3760711349, 1749.9529960416, 1749.9529960416, 1751.0354991655}
	};


	// 遍历原始数据，将整数和 double 数据分开存入各自的 vector
	for (const auto& row : rawData) {
		std::vector<int> intRow;
		std::vector<double> doubleRow;

		// 跳过每行的第一个元素（表示长度）
		for (size_t i = 1; i < row.size(); ++i) {
			if (std::floor(row[i]) == row[i]) {
				intRow.push_back(static_cast<int>(row[i]));
			}
			else {
				doubleRow.push_back(row[i]);
			}
		}
		// 将分离后的数据加入到各自的二维 vector 中
		Sequence_GTOC11_multi.push_back(intRow);
		Maximum_T_GTOC11.push_back(doubleRow);
	}

	T_GTOC11_multi = {
		{1650.6619238551, 1659.3678410407, 1661.8401236744, 1664.9306247664, 1667.4144121260, 1670.8782954168, 1671.8372807069, 1675.8199220635, 1677.4704299065, 1679.4115120968, 1682.0666096993, 1683.9351210540, 1688.3483826949, 1690.8565795725, 1692.9582245835, 1694.6393196481, 1696.0740607465, 1698.7546381991, 1700.8960182313, 1702.7994824057, 1703.3277290049, 1709.1614620677, 1711.1337237507, 1713.5112160843, 1714.6283282706, 1715.5565460260, 1719.4836481635, 1722.4568569558, 1725.9012557616, 1730.2455219203, 1732.9426354807, 1735.0364089926, 1736.9277189926, 1740.6890597408, 1741.3045080143, 1744.5598020797},
		{1651.0620960335, 1655.9907354226, 1659.4722626260, 1661.1523017773, 1662.8777300621, 1663.5036408329, 1667.3160337358, 1667.5817165893, 1668.8850279838, 1673.8855614728, 1676.9231310699, 1678.7914132548, 1681.6256925053, 1683.5701590686, 1686.1793865651, 1687.7199307475, 1691.8643484751, 1693.8624066337, 1695.6753442726, 1696.6100839585, 1698.4467834847, 1701.1086301509, 1702.4997801230, 1703.2914215671, 1706.2914932772, 1708.5469789379, 1711.8257489736, 1713.8503078408, 1718.4796744582, 1723.1736581653, 1723.7314027370, 1724.8926699694, 1726.5311691766, 1728.0610628218, 1729.3885847442, 1731.0058435435, 1732.2716941889, 1735.3841951056, 1738.3248266310, 1741.5519685637, 1742.8486873935, 1745.3871289235, 1749.0144794555},
		{1647.2309886717, 1653.1797254534, 1655.6865582158, 1657.1427049056, 1659.0370550568, 1660.0322133044, 1662.8317281660, 1663.4222494960, 1664.7506045300, 1669.7897905382, 1670.9314687920, 1672.9206747261, 1674.8703127206, 1677.7312846292, 1680.1106146743, 1684.7978693326, 1688.2087224047, 1690.3165283583, 1692.9898154148, 1696.3179259982, 1699.3573091885, 1700.7556144912, 1701.6831382834, 1703.4795279989, 1704.3717976238, 1704.9024837498, 1707.1071425629, 1710.0965176166, 1714.5704473677, 1718.4624316916, 1719.1606870927, 1723.0781018027, 1727.8511211523, 1728.3628921886, 1731.0876359504, 1736.8032760261, 1738.0156824449, 1738.7856463152, 1742.4520298469, 1748.4471907152},
		{1647.0949606939, 1653.2590198135, 1655.9524396423, 1657.4288971369, 1660.1047228439, 1661.3919178472, 1662.2626876809, 1666.2722271721, 1668.3628233007, 1669.7288203517, 1672.0448881952, 1675.8662592951, 1677.4125971183, 1681.2358536189, 1684.0289709584, 1684.4875967959, 1689.2008964349, 1689.6238277711, 1692.0347162479, 1695.2769293872, 1697.2776042449, 1700.1319581701, 1701.2855049632, 1702.2081440031, 1706.3527732609, 1707.0237521432, 1708.6602294582, 1710.4548627326, 1712.9686265759, 1716.1759014531, 1718.3999170680, 1720.1329010170, 1723.2671573073, 1727.6182120618, 1728.3333915638, 1733.1927880098, 1734.9951395904, 1737.7859977467, 1738.6844125241, 1741.5388175431, 1746.6836964790, 1748.8513262755},
		{1650.6832941145, 1657.5365219941, 1658.8718713050, 1660.0894693855, 1660.7681209079, 1663.6974375333, 1666.7922945703, 1669.5588539619, 1671.4879644190, 1673.3521792405, 1675.4627477761, 1678.6540574407, 1682.0403974076, 1682.8719697360, 1685.9894908323, 1689.0850288064, 1690.6746078038, 1694.2034154649, 1694.9930410484, 1698.3768398927, 1699.6078995365, 1702.8318583819, 1704.3839963518, 1707.2025070862, 1709.4538697240, 1713.0724872636, 1714.5036925901, 1715.5256478374, 1718.0569064048, 1723.2223433322, 1727.7407809617, 1728.6320640919, 1731.3344912402, 1733.4327422548, 1736.5651720036, 1738.1066561793, 1738.8552454254, 1740.7002495749, 1745.1101983603, 1746.9984782099, 1748.7095200295},
		{1647.0412445271, 1652.2326896543, 1653.0635837409, 1654.8357256471, 1658.9443246989, 1662.5726142218, 1665.5075553611, 1669.1544064946, 1670.2166779427, 1674.6933606715, 1677.3666319935, 1677.8289904672, 1679.1902668517, 1683.2278110123, 1684.4775649578, 1687.6755940827, 1692.4685529888, 1694.0318174072, 1696.4175619004, 1699.6744352393, 1702.2558192960, 1705.2395411820, 1707.3640764147, 1708.8313480110, 1709.7496390057, 1713.9887366814, 1714.7767006294, 1715.8032035828, 1719.4104465576, 1720.8876887062, 1722.2455819236, 1723.1589309754, 1726.9725766519, 1729.3617953840, 1733.1367886414, 1736.9661912964, 1739.0212029902, 1743.1535097561, 1744.3954332400, 1746.3698546406},
		{1646.9117513742, 1652.9407513947, 1655.0301220753, 1655.8874902792, 1657.4236533580, 1660.0365585343, 1663.7872066063, 1667.7936306252, 1669.7115769072, 1673.2054611891, 1673.8347386607, 1676.1561449632, 1681.0414751066, 1684.5286634953, 1686.5257351468, 1688.4894132293, 1689.8614132384, 1690.7455937372, 1694.4682165991, 1695.7598935269, 1698.3150442975, 1701.2450043875, 1707.6690485784, 1710.0458313273, 1712.5376837698, 1716.4367723625, 1718.1244205711, 1722.4479969879, 1724.6795123423, 1725.5181644615, 1728.3629773949, 1730.5761059022, 1732.5892024623, 1735.5409044265, 1737.2581042284, 1739.5510745201, 1743.0317962951, 1744.8851893855},
		{1647.9369321039, 1654.9581876507, 1658.2067390053, 1660.6150219971, 1662.0541882322, 1663.4909487270, 1665.1661617060, 1669.1632934629, 1671.4494532256, 1673.5149293325, 1677.4468196669, 1678.4495308840, 1680.6761998555, 1683.7911745899, 1687.1269142463, 1690.8708041515, 1691.6155710181, 1693.8608243266, 1695.2447907437, 1698.3522988031, 1701.5779848642, 1702.9296556700, 1703.8984402662, 1706.7003269843, 1709.1291593669, 1711.8276575233, 1713.6438869093, 1717.8348009943, 1721.5624419968, 1724.0192123986, 1726.4042253315, 1729.2572900446, 1731.3011895365, 1735.8193891361, 1738.2454126252, 1740.6441403304, 1743.1114801445, 1744.0095454972, 1745.8468741143, 1747.2592543767, 1749.5644313240},
		{1650.6914727832, 1657.8430763811, 1660.3294102702, 1662.1372447020, 1666.5330930896, 1667.1200041299, 1669.1713089440, 1672.8315613853, 1674.2494242615, 1674.5001478903, 1676.3483127244, 1678.4879013137, 1680.9463833232, 1682.0979436693, 1683.5359351474, 1686.3591501772, 1688.3561181601, 1690.6233051387, 1698.1044308970, 1699.5425949673, 1701.8556819581, 1703.7355409520, 1709.4788747431, 1711.8883816200, 1713.6541897597, 1715.5284891654, 1717.8711839731, 1719.7723003435, 1724.1827637418, 1727.1311041826, 1733.4620413433, 1736.9903911120, 1739.1471594946, 1742.2396052278, 1743.2813527919, 1745.8214479494, 1747.3181298273, 1750.8837897671},
		{1647.4816518652, 1653.6117610964, 1656.4958628149, 1659.4649238693, 1662.4272749750, 1666.2317358784, 1667.9279534218, 1672.5520214460, 1677.2319669962, 1678.5284567265, 1680.5855163711, 1683.3438231357, 1685.6860623762, 1686.9594903362, 1690.6464116077, 1692.3568502023, 1694.5531835630, 1696.0940214609, 1700.1252118832, 1701.7401265615, 1703.0772835701, 1707.7187687457, 1708.6852927104, 1711.4852638494, 1714.7643833562, 1715.6509795100, 1717.3656743829, 1720.9175085477, 1723.4886739800, 1724.1906609836, 1726.8091613020, 1732.9472313386, 1734.2171201349, 1735.3190257701, 1739.3356539931, 1740.8968785541, 1744.4747036949, 1744.8225781543, 1747.5629497143}
	};


	//所有时间数据*GTOC11_TUnit/86400.0后- GTOC11_MJD_Init，再乘上86400.0
	for (int i = 0; i < T_GTOC11_multi.size(); i++)
	{
		for (int j = 0; j < T_GTOC11_multi[i].size(); j++)
		{
			T_GTOC11_multi[i][j] = T_GTOC11_multi[i][j] * GTOC11_TUnit - GTOC11_MJD_Init * 86400.0;
			Maximum_T_GTOC11[i][j] = Maximum_T_GTOC11[i][j] * GTOC11_TUnit - GTOC11_MJD_Init * 86400.0;
		}
	}

}

//void GTOC11_sequence(std::vector<std::vector<int>>& Sequence_GTOC11_multi_temp,
//	std::vector<std::vector<double>>& T_GTOC11_multi_temp, 
//	std::vector<std::vector<double>>& Maximum_T_GTOC11_temp)
//{
//	Sequence_GTOC11_multi_temp = Sequence_GTOC11_multi;
//	T_GTOC11_multi_temp        = T_GTOC11_multi;
//	Maximum_T_GTOC11_temp      = Maximum_T_GTOC11;
//}

const std::vector<std::vector<int>>& GTOC11_sequence_get_sequence() {
	return Sequence_GTOC11_multi;
}

const std::vector<std::vector<double>>& GTOC11_sequence_get_T() {
	return T_GTOC11_multi;
}

const std::vector<std::vector<double>>& GTOC11_sequence_get_Maximum_T() {
	return Maximum_T_GTOC11;
}


/****************************************************************************
* 函数名   : rendezvous2flyby()
* 功  能   : 从交会条件变为飞越条件
* 输 入    : rv：小行星的位置速度，6维
*            last_dv_end：到达小行前的上一次制动（加速）原始dv，3维
*            next_dv_start：出发去下一颗小行星加速（制动）原始dv，3维
* 全局变量 : 无
* 输    出 : last_dv_end：【满足飞越条件的】到达小行前的上一次制动（加速）dv，3维
*            next_dv_start：【满足飞越条件的】出发去下一颗小行星加速（制动）dv，3维
****************************************************************************/
void rendezvous2flyby(const double* rv, double* last_dv_end, double* next_dv_start)
{
	const double r = (2.0 - 1.0e-12)*1000.0 ; //允许半径  2km/s 20241113 使用国际单位，而不是归一化单位
	double F1[3], F2[3], O[3]; //椭圆的两个焦点，圆心位置
	for (int i = 0; i < 3; i++)
	{
		F1[i] = -last_dv_end[i];
		F2[i] = next_dv_start[i];
		O[i] = 0.0;
	}
	double** TM = new double* [3];
	for (int i = 0; i < 3; i++)
	{
		TM[i] = new double[3];
	}
	calc_transF2X(F1, F2, O, TM);
	//if (O[2] != 0.0)
	//{
	//	cout << "坐标转换错误!!!" << endl;
	//}
	double c = abs(F1[0]); //焦距

	double temp_dV1[3], temp_dV2[3]; //平面中的速度增量
	bool flag = verifyFinC(O, r, c);
	if (flag)
	{
		if ((O[0] < c) && (O[0] > -c))
		{
			temp_dV1[0] = O[0] + c; temp_dV1[1] = 0.0; temp_dV1[2] = 0.0;
			temp_dV2[0] = c - O[0]; temp_dV2[1] = 0.0; temp_dV2[2] = 0.0; //取圆心垂足
		}
		else if (sqrt((O[0] + c) * (O[0] + c) + O[1] * O[1]) > r)
		{
			temp_dV1[0] = 2.0 * c; temp_dV1[1] = 0.0; temp_dV1[2] = 0.0;
			temp_dV2[0] = 0.0; temp_dV2[1] = 0.0; temp_dV2[2] = 0.0; //取F2点
		}
		else
		{
			temp_dV1[0] = 0.0; temp_dV1[1] = 0.0; temp_dV1[2] = 0.0;
			temp_dV2[0] = 2.0 * c; temp_dV2[1] = 0.0; temp_dV2[2] = 0.0; //取F1点
		}
	}
	else
	{
		double temp_x, temp_y; //切点坐标
		double m = O[0];
		double n = O[1]; //方便计算中间变量
		//temp_x = m * (sqrt(m * m + n * n) - r) / sqrt(m * m + n * n);
		//temp_y = n * (sqrt(m * m + n * n) - r) / sqrt(m * m + n * n); //中点近似

		//double a = calc_eqnA(m, n, r, c);  //通过求解方程的方法，经测试仍有问题

		//求出半长轴a的大小
		double a = find_minimum(fabs(m), fabs(n), c, r)/2.0;

		temp_x = calc_eqnX(m, n, r, c, a);
		if (abs(temp_x - m) > r || isnan(a)) //避免中间出错
			temp_x = m * (sqrt(m * m + n * n) - r) / sqrt(m * m + n * n);
		if (n == 0.0)
			temp_y = 0.0;
		else
			temp_y = n - abs(n) * sqrt(r * r - (temp_x - m) * (temp_x - m)) / n;
		temp_dV1[0] = temp_x + c; temp_dV1[1] = temp_y; temp_dV1[2] = 0.0;
		temp_dV2[0] = c - temp_x; temp_dV2[1] = -temp_y; temp_dV2[2] = 0.0;
	}

	M_Multi(last_dv_end,   TM, temp_dV1, 3, 3);
	M_Multi(next_dv_start, TM, temp_dV2, 3, 3);

	for (int i = 0; i < 3; i++)
	{
		delete[] TM[i];
	}
	delete[] TM;
}

// 旋转坐标系，将F1F2C转到XOY平面，F1F2沿X轴方向，并计算转移矩阵
// r1r2分别为F1F2坐标，r3初始为原点，TM为转移矩阵(平面→原)
void calc_transF2X(double* r1, double* r2, double* r3, double** TM)
{
	double temp_x[3], temp_y[3], temp_z[3]; //转换后坐标
	V_Minus(temp_x, r2, r1, 3);
	if ((V_Norm2(r1, 3) == 0) && (V_Norm2(r1, 3) == 0))
	{
		for (int ii = 0; ii < 3; ii++)
		{
			r1[ii] = 0.0; r2[ii] = 0.0;
			for (int jj = 0; jj < 3; jj++)
				TM[ii][jj] = 0.0;
		}
		return;
	}
	V_Cross(temp_z, r1, r2);
	if (V_Norm2(temp_z, 3) == 0) //r1, r2共线
	{
		temp_z[0] = 0.0;
		temp_z[1] = -temp_x[2];
		temp_z[2] = temp_x[1];
		if (V_Norm2(temp_z, 3) == 0) //temp_x沿x轴
		{
			temp_z[0] = 0.0;
			temp_z[1] = 0.0;
			temp_z[2] = 1.0;
		}
	}

	V_Cross(temp_y, temp_z, temp_x);
	double c = V_Norm2(temp_x, 3) / 2.0;
	double temp_O[3]; //转换后原点坐标
	V_Add(temp_O, r1, r2, 3);
	V_Divid(temp_O, temp_O, -2.0, 3);
	r1[0] = -c; r1[1] = 0.0; r1[2] = 0.0;
	r2[0] = c; r2[1] = 0.0; r2[2] = 0.0;

	V_Divid(temp_x, temp_x, V_Norm2(temp_x, 3), 3);
	V_Divid(temp_y, temp_y, V_Norm2(temp_y, 3), 3);
	V_Divid(temp_z, temp_z, V_Norm2(temp_z, 3), 3); //归一化

	double* temp_TM[3];
	for (int i = 0; i < 3; i++)
		temp_TM[i] = new double[3];
	M_Copy(temp_TM, temp_x[0], temp_x[1], temp_x[2], temp_y[0], temp_y[1], temp_y[2], temp_z[0], temp_z[1], temp_z[2]);
	M_Tranpose(TM, temp_TM, 3, 3);
	M_Multi(r3, temp_TM, temp_O, 3, 3); //转换O点坐标
	for (int i = 0; i < 3; i++)
		delete[] temp_TM[i];

	return;
}

// 判断F1F2线段是否有点在圆内(上)
bool verifyFinC(const double* rC, double r, double c)
{
	double d1 = sqrt((rC[0] + c) * (rC[0] + c) + rC[1] * rC[1]);
	double d2 = sqrt((rC[0] - c) * (rC[0] - c) + rC[1] * rC[1]);
	if ((d1 <= r) || (d2 <= r))
	{
		return true;
	}
	else
	{
		double dC = abs(rC[1]); // 圆心到x轴距离
		if (dC > r)
		{
			return false;
		}
		else
		{
			double angle = rC[0] * rC[0] - c * c; // 表征与x轴夹角是否同为锐角/钝角
			if (angle > 0)
			{
				return false;
			}
			else
			{
				return true;
			}
		}
	}
}

// 解半长轴a四次方程并取第二大的a(a外切>a内切>c)
double calc_eqnA(double m, double n, double r, double c)
{
	double K1 = (double)(pow(c, 4) - 2.0 * pow(c, 2) * pow(m, 2) + 2.0 * pow(c, 2) * pow(n, 2) + pow(m, 4) + 2.0 * pow(m, 2) * pow(n, 2) + pow(n, 4));
	double K2 = (double)(-2.0 * pow(c, 6) + 2.0 * pow(c, 4) * pow(m, 2) - 6.0 * pow(c, 4) * pow(n, 2) - 4.0 * pow(c, 4) * pow(r, 2) + 2.0 * pow(c, 2) * pow(m, 4) - 4.0 * pow(c, 2) * pow(m, 2) * pow(n, 2) + 6.0 * pow(c, 2) * pow(m, 2) * pow(r, 2) - 6.0 * pow(c, 2) * pow(n, 4) - 6.0 * pow(c, 2) * pow(n, 2) * pow(r, 2) - 2.0 * pow(m, 6) - 6.0 * pow(m, 4) * pow(n, 2) - 2.0 * pow(m, 4) * pow(r, 2) - 6.0 * pow(m, 2) * pow(n, 4) - 4.0 * pow(m, 2) * pow(n, 2) * pow(r, 2) - 2.0 * pow(n, 6) - 2.0 * pow(n, 4) * pow(r, 2));
	double K3 = (double)(pow(c, 8) + 2.0 * pow(c, 6) * pow(m, 2) + 4.0 * pow(c, 6) * pow(n, 2) + 6.0 * pow(c, 6) * pow(r, 2) - 6.0 * pow(c, 4) * pow(m, 4) + 8.0 * pow(c, 4) * pow(m, 2) * pow(n, 2) - 8.0 * pow(c, 4) * pow(m, 2) * pow(r, 2) + 6.0 * pow(c, 4) * pow(n, 4) + 10 * pow(c, 4) * pow(n, 2) * pow(r, 2) + 6.0 * pow(c, 4) * pow(r, 4) + 2.0 * pow(c, 2) * pow(m, 6) + 8.0 * pow(c, 2) * pow(m, 4) * pow(n, 2) + 4.0 * pow(c, 2) * pow(m, 4) * pow(r, 2) + 10 * pow(c, 2) * pow(m, 2) * pow(n, 4) + 6.0 * pow(c, 2) * pow(m, 2) * pow(n, 2) * pow(r, 2) - 6.0 * pow(c, 2) * pow(m, 2) * pow(r, 4) + 4.0 * pow(c, 2) * pow(n, 6) + 2.0 * pow(c, 2) * pow(n, 4) * pow(r, 2) + 6.0 * pow(c, 2) * pow(n, 2) * pow(r, 4) + pow(m, 8) + 4.0 * pow(m, 6) * pow(n, 2) - 2.0 * pow(m, 6) * pow(r, 2) + 6.0 * pow(m, 4) * pow(n, 4) - 6.0 * pow(m, 4) * pow(n, 2) * pow(r, 2) + pow(m, 4) * pow(r, 4) + 4.0 * pow(m, 2) * pow(n, 6) - 6.0 * pow(m, 2) * pow(n, 4) * pow(r, 2) + 2.0 * pow(m, 2) * pow(n, 2) * pow(r, 4) + pow(n, 8) - 2.0 * pow(n, 6) * pow(r, 2) + pow(n, 4) * pow(r, 4));
	double K4 = (double)(-2.0 * pow(c, 8) * pow(m, 2) - 2.0 * pow(c, 8) * pow(r, 2) + 2.0 * pow(c, 6) * pow(m, 4) - 6.0 * pow(c, 6) * pow(m, 2) * pow(n, 2) + 4.0 * pow(c, 6) * pow(m, 2) * pow(r, 2) - 6.0 * pow(c, 6) * pow(n, 2) * pow(r, 2) - 6.0 * pow(c, 6) * pow(r, 4) + 2.0 * pow(c, 4) * pow(m, 6) - 4.0 * pow(c, 4) * pow(m, 4) * pow(n, 2) - 8.0 * pow(c, 4) * pow(m, 4) * pow(r, 2) - 6.0 * pow(c, 4) * pow(m, 2) * pow(n, 4) + 6.0 * pow(c, 4) * pow(m, 2) * pow(n, 2) * pow(r, 2) + 10 * pow(c, 4) * pow(m, 2) * pow(r, 4) - 6.0 * pow(c, 4) * pow(n, 4) * pow(r, 2) - 2.0 * pow(c, 4) * pow(n, 2) * pow(r, 4) - 4.0 * pow(c, 4) * pow(r, 6) - 2.0 * pow(c, 2) * pow(m, 8) - 6.0 * pow(c, 2) * pow(m, 6) * pow(n, 2) + 6.0 * pow(c, 2) * pow(m, 6) * pow(r, 2) - 6.0 * pow(c, 2) * pow(m, 4) * pow(n, 4) + 10 * pow(c, 2) * pow(m, 4) * pow(n, 2) * pow(r, 2) - 6.0 * pow(c, 2) * pow(m, 4) * pow(r, 4) - 2.0 * pow(c, 2) * pow(m, 2) * pow(n, 6) + 2.0 * pow(c, 2) * pow(m, 2) * pow(n, 4) * pow(r, 2) - 2.0 * pow(c, 2) * pow(m, 2) * pow(n, 2) * pow(r, 4) + 2.0 * pow(c, 2) * pow(m, 2) * pow(r, 6) - 2.0 * pow(c, 2) * pow(n, 6) * pow(r, 2) + 4.0 * pow(c, 2) * pow(n, 4) * pow(r, 4) - 2.0 * pow(c, 2) * pow(n, 2) * pow(r, 6));
	double K5 = (double)(pow(c, 8) * pow(m, 4) - 2.0 * pow(c, 8) * pow(m, 2) * pow(r, 2) + pow(c, 8) * pow(r, 4) - 2.0 * pow(c, 6) * pow(m, 6) + 2.0 * pow(c, 6) * pow(m, 4) * pow(n, 2) + 6.0 * pow(c, 6) * pow(m, 4) * pow(r, 2) - 4.0 * pow(c, 6) * pow(m, 2) * pow(n, 2) * pow(r, 2) - 6.0 * pow(c, 6) * pow(m, 2) * pow(r, 4) + 2.0 * pow(c, 6) * pow(n, 2) * pow(r, 4) + 2.0 * pow(c, 6) * pow(r, 6) + pow(c, 4) * pow(m, 8) + 2.0 * pow(c, 4) * pow(m, 6) * pow(n, 2) - 4.0 * pow(c, 4) * pow(m, 6) * pow(r, 2) + pow(c, 4) * pow(m, 4) * pow(n, 4) - 6.0 * pow(c, 4) * pow(m, 4) * pow(n, 2) * pow(r, 2) + 6.0 * pow(c, 4) * pow(m, 4) * pow(r, 4) - 2.0 * pow(c, 4) * pow(m, 2) * pow(n, 4) * pow(r, 2) + 6.0 * pow(c, 4) * pow(m, 2) * pow(n, 2) * pow(r, 4) - 4.0 * pow(c, 4) * pow(m, 2) * pow(r, 6) + pow(c, 4) * pow(n, 4) * pow(r, 4) - 2.0 * pow(c, 4) * pow(n, 2) * pow(r, 6) + pow(c, 4) * pow(r, 8));

	// 天珩公式 -> 有点问题
	double D = (double)(3.0 * pow(K2, 2) - 8.0 * K1 * K3);
	double E = (double)(-pow(K2, 3) + 4.0 * K1 * K2 * K3 - 8.0 * pow(K1, 2) * K4);
	double F = (double)(3.0 * pow(K2, 4) + 16.0 * pow(K1, 2) * pow(K3, 2) - 16.0 * K1 * pow(K2, 2) * K3 + 16.0 * pow(K1, 2) * K2 * K4 - 64.0 * pow(K1, 3) * K5);
	double A = (double)(pow(D, 2) - 3.0 * F);
	double B = (double)(D * F - 9.0 * pow(E, 2));
	double C = (double)(pow(F, 2) - 3.0 * D * pow(E, 2));

	double Delta = pow(B, 2) - 4 * A * C;
	if (Delta > 0.0)
	{
		if (Delta <= 1.0e-13)
		{
			double a2 = (-K2 - 2.0 * A * E / B) / (4.0 * K1);
			if (a2 <= 0.0 || sqrt(a2) < c)
				return 0.0;
			return sqrt(a2);
		}
		double z1 = A * D + 3.0 * (-B + sqrt(Delta)) / 2.0;
		double z2 = A * D + 3.0 * (-B - sqrt(Delta)) / 2.0;
		double temp_z = (pow(z1, 1 / 3.0) + pow(z2, 1 / 3.0));
		double z = D * D - D * temp_z + temp_z * temp_z - 3.0 * A;

		if (E == 0.0)
			return 0.0;
		double a_low = (-K2 + abs(E) * sqrt((D + temp_z) / 3.0) / E - sqrt((2.0 * D - temp_z + 2.0 * sqrt(z)) / 3.0)) / (4.0 * K1);
		if (a_low <= 0.0 || sqrt(a_low) < c)
			return 0.0;
		return sqrt(a_low);
	}
	return 0.0;

}

// 解椭圆与圆外切四次方程x坐标
double calc_eqnX(double m, double n, double r, double c, double a)
{
	double X;
	if (a == 0.0)
	{
		X = m * (sqrt(m * m + n * n) - r) / sqrt(m * m + n * n);
		return X;
	}

	double K1 = pow(c, 4);
	double K2 = (-4.0 * pow(a, 2) * pow(c, 2) * m);
	double K3 = (2.0 * pow(a, 4) * pow(c, 2) + 4.0 * pow(a, 4) * pow(m, 2) + 4.0 * pow(a, 4) * pow(n, 2) - 2.0 * pow(a, 2) * pow(c, 4) + 2.0 * pow(a, 2) * pow(c, 2) * pow(m, 2) - 2.0 * pow(a, 2) * pow(c, 2) * pow(n, 2) - 2.0 * pow(a, 2) * pow(c, 2) * pow(r, 2));
	double K4 = (-4.0 * pow(a, 6) * m + 4.0 * pow(a, 4) * pow(c, 2) * m - 4.0 * pow(a, 4) * pow(m, 3) - 4.0 * pow(a, 4) * m * pow(n, 2) + 4.0 * pow(a, 4) * m * pow(r, 2));
	double K5 = pow(a, 8) - 2.0 * pow(a, 6) * pow(c, 2) + 2.0 * pow(a, 6) * pow(m, 2) - 2.0 * pow(a, 6) * pow(n, 2) - 2.0 * pow(a, 6) * pow(r, 2) + pow(a, 4) * pow(c, 4) - 2.0 * pow(a, 4) * pow(c, 2) * pow(m, 2) + 2.0 * pow(a, 4) * pow(c, 2) * pow(n, 2) + 2.0 * pow(a, 4) * pow(c, 2) * pow(r, 2) + pow(a, 4) * pow(m, 4) + 2.0 * pow(a, 4) * pow(m, 2) * pow(n, 2) - 2.0 * pow(a, 4) * pow(m, 2) * pow(r, 2) + pow(a, 4) * pow(n, 4) - 2.0 * pow(a, 4) * pow(n, 2) * pow(r, 2) + pow(a, 4) * pow(r, 4);

	double D = (double)(3.0 * pow(K2, 2) - 8.0 * K1 * K3);
	double E = (double)(-pow(K2, 3) + 4.0 * K1 * K2 * K3 - 8.0 * pow(K1, 2) * K4);
	double F = (double)(3.0 * pow(K2, 4) + 16.0 * pow(K1, 2) * pow(K3, 2) - 16.0 * K1 * pow(K2, 2) * K3 + 16.0 * pow(K1, 2) * K2 * K4 - 64.0 * pow(K1, 3) * K5);
	double A = (double)(pow(D, 2) - 3.0 * F);
	double B = (double)(D * F - 9.0 * pow(E, 2));
	double C = (double)(pow(F, 2) - 3.0 * D * pow(E, 2));

	if (A * B >= 0)
	{
		X = m * (sqrt(m * m + n * n) - r) / sqrt(m * m + n * n);
		return X;
	}
	X = (-K2 - 2.0 * A * E / B) / (4.0 * K1);
	return X;
}
